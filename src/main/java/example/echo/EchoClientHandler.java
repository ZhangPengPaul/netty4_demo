package example.echo;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;

import java.nio.charset.Charset;

/**
 * Created by PaulZhang on 2016/7/1.
 */
public class EchoClientHandler extends ChannelInboundHandlerAdapter {


    private byte[] contentBytes;

    private int length;

    public EchoClientHandler() {
        String str = "1111再发个大于1024的端端#";
        contentBytes = str.getBytes(Charset.forName("UTF-8"));
        length = contentBytes.length;
//        firstMsg = Unpooled.buffer(EchoClient.SIZE);
//        firstMsg = Unpooled.buffer(EchoClient.SIZE);
//        for (int i = start; i < firstMsg.capacity(); i++) {
//            firstMsg.writeByte(bytes[i]);
    }

//        String str = "1111再发个大于1024的端端#";
//        System.out.println("Now client sending : " + str);
//        firstMsg = Unpooled.copiedBuffer(str.getBytes());
////        firstMsg.writeBytes(str.getBytes());
//}

    @Override
    public void channelActive(ChannelHandlerContext ctx) throws Exception {
        int loop = length / EchoClient.SIZE;
        int mod = length % EchoClient.SIZE;
        if (mod > 0) {
            loop += 1;
        }

        int j = 0;
        int limit = EchoClient.SIZE;

        for (int i = 0; i < loop; i++) {
            ByteBuf firstMsg = Unpooled.buffer(EchoClient.SIZE);
            for (; j < limit; j++) {
                if (j >= length) {
                    break;
                }
                firstMsg.writeByte(contentBytes[j]);
            }
            ctx.writeAndFlush(firstMsg);
            limit += EchoClient.SIZE;
        }
    }

    @Override
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
        ctx.write(msg);
    }

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
        ctx.flush();
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        cause.printStackTrace();
        ctx.close();
    }
}
